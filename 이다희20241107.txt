### 1. **MQTT 통신에 대해 검색하고 서술하시오**

**MQTT (Message Queuing Telemetry Transport)**는 경량의 메시지 전송 프로토콜로, 주로 사물인터넷(IoT) 환경에서 사용됩니다. 이 프로토콜은 작은 대역폭, 낮은 전력 소모, 그리고 네트워크 연결이 불안정한 환경에서도 효율적으로 작동하는 특성을 가지고 있습니다. MQTT는 **Publish/Subscribe 모델**을 사용하여, 데이터의 송수신을 **브로커**를 통해 처리합니다.

- **Publish/Subscribe 모델**: 클라이언트는 MQTT 브로커에 특정 "주제"에 대한 메시지를 발행(Publish)하거나, 주제에 대한 메시지를 구독(Subscribe)합니다. 
- **주요 특징**:
  - **경량**: 헤더가 작고, 네트워크 대역폭을 적게 사용합니다.
  - **QoS (Quality of Service)**: 3단계의 QoS를 제공하여, 메시지 전달의 신뢰성을 보장합니다.
  - **Persistent Session**: 연결이 끊어진 후에도 세션을 유지하여, 재접속 시 최신 메시지를 받을 수 있습니다.
  - **보안**: SSL/TLS를 통한 암호화로 안전한 통신을 지원합니다.

**사용 사례**: IoT 장치 간의 실시간 데이터 통신, 스마트 홈, 원격 모니터링, 차량 관리 시스템 등에서 많이 사용됩니다.

------------------------------------------------------------------------------------------------------------------------------------------

### 2. **자바스크립트 변수에 대해 검색해보고 서술하시오**

자바스크립트에서는 변수를 선언할 때 `var`, `let`, `const`를 사용합니다. 이들은 각각 변수의 스코프(scope)와 재할당 가능 여부에 차이가 있습니다.

- **`var`**:
  - **기존 방식**: `var`는 ES5(ECMAScript 5) 이전의 방식으로 변수 선언에 사용됩니다.
  - **스코프**: 함수 스코프(function-scoped)입니다. 즉, `var`로 선언된 변수는 함수 내에서만 유효하고, 함수 밖에서는 접근할 수 없습니다.
  - **변수 호이스팅**: 선언이 해당 코드의 최상단으로 "호이스팅"되므로, 변수가 선언되기 전에 접근할 수 있습니다.

- **`let`**:
  - **스코프**: 블록 스코프(block-scoped)입니다. 즉, 중괄호 `{}` 내에서만 유효하며, 이는 `if`, `for` 등과 같은 블록에서 선언된 변수에 적용됩니다.
  - **재할당 가능**: `let`으로 선언된 변수는 재할당이 가능합니다.
  - **호이스팅**: 변수는 선언 전에 참조할 수 없으며, 이는 `let`과 `const`에만 해당되는 특성입니다.

- **`const`**:
  - **스코프**: `let`과 동일하게 블록 스코프를 가집니다.
  - **재할당 불가**: `const`로 선언된 변수는 값을 재할당할 수 없습니다. 단, 객체나 배열을 `const`로 선언하더라도 그 안의 내용은 변경할 수 있습니다.
  - **호이스팅**: `const`도 `let`처럼 호이스팅이 발생하지만, 선언 전에는 접근할 수 없습니다.

**요약**: 
- `var`: 함수 스코프, 재할당 가능, 호이스팅됨.
- `let`: 블록 스코프, 재할당 가능, 호이스팅되지만 참조 불가.
- `const`: 블록 스코프, 재할당 불가, 호이스팅되지만 참조 불가.

------------------------------------------------------------------------------------------------------------------------------------------

### 3. **자바스크립트 Data Type에 대해 검색해보고 서술하시오**

자바스크립트에는 6가지 기본 데이터 타입이 있습니다:

1. **`Number`**: 
   - 숫자 값으로, 정수와 부동소수점 숫자를 모두 포함합니다. 예: `10`, `3.14`, `-100`.
   - 자바스크립트는 `Number` 타입만 사용하며, 따로 정수와 부동소수점 숫자가 구분되지 않습니다.

2. **`String`**:
   - 문자로 이루어진 데이터 타입입니다. 문자열은 작은따옴표(`'`) 또는 큰따옴표(`"`)로 감쌀 수 있습니다. 예: `'Hello'`, `"World"`.
   - 텍스트를 나타내는 데 사용됩니다.

3. **`Boolean`**:
   - **논리 값**을 나타냅니다. 두 가지 값만 가질 수 있습니다: `true` 또는 `false`.
   - 주로 조건문에서 참 또는 거짓을 나타내는 데 사용됩니다.

4. **`null`**:
   - 의도적으로 "비어있는 값"을 나타냅니다.
   - `null`은 어떤 객체를 참조하지 않음을 의미하는 특수한 값입니다.

5. **`undefined`**:
   - 변수가 선언되었지만 값이 할당되지 않은 상태를 나타냅니다.
   - 함수에서 반환값이 없을 때도 `undefined`를 반환합니다.

6. **`Symbol`**:
   - 고유하고 변경할 수 없는 값입니다. 주로 객체의 프로퍼티 키를 고유하게 만들기 위해 사용됩니다.
   - 예: `Symbol('description')`

**요약**:
- `Number`: 숫자 (정수 및 실수).
- `String`: 문자열.
- `Boolean`: 참 또는 거짓.
- `null`: 빈 값 (의도적으로 비어 있음).
- `undefined`: 값이 할당되지 않은 변수.
- `Symbol`: 고유하고 변경 불가능한 값.

------------------------------------------------------------------------------------------------------------------------------------------

### 4. **JAVA와 JavaScript의 차이점을 검색해보고 서술하시오**

`Java`와 `JavaScript`는 이름이 비슷하지만 매우 다른 프로그래밍 언어입니다. 주요 차이점은 다음과 같습니다:

1. **언어 종류**:
   - **Java**: **컴파일형 언어**입니다. 코드를 먼저 컴파일하여 바이트 코드로 변환하고, Java Virtual Machine (JVM)에서 실행됩니다.
   - **JavaScript**: **인터프리터형 언어**입니다. 브라우저에서 실행되는 스크립트 언어로, 코드가 직접 실행됩니다.

2. **용도**:
   - **Java**: 주로 서버 사이드 개발, 모바일 애플리케이션(Android), 데스크탑 애플리케이션 등에서 사용됩니다.
   - **JavaScript**: 주로 웹 페이지의 동적인 요소를 제어하기 위해 사용되며, 브라우저에서 클라이언트 사이드에서 실행됩니다. Node.js를 사용하면 서버 사이드에서도 사용할 수 있습니다.

3. **타입 시스템**:
   - **Java**: **정적 타이핑(Static Typing)**을 사용합니다. 변수의 타입을 미리 정의해야 하며, 컴파일 시 타입 검사 오류가 발생합니다.
   - **JavaScript**: **동적 타이핑(Dynamic Typing)**을 사용합니다. 변수의 타입을 선언할 필요가 없으며, 실행 시 타입이 결정됩니다.

4. **객체지향**:
   - **Java**: 완전한 객체지향 프로그래밍 언어로, 모든 코드가 클래스 내에 존재해야 합니다. 클래스 기반 객체지향(OOP)을 사용합니다.
   - **JavaScript**: 원래는 객체지향 언어가 아니었지만, 객체를 생성하고 조작하는 방법이 제공되며, ES6 이후 클래스 문법이 추가되었습니다.

5. **상속**:
   - **Java**: 클래스 기반 상속을 사용합니다. 클래스는 객체의 blueprint 역할을 합니다.
   - **JavaScript**: 프로토타입 기반 상속을 사용합니다. 객체는 다른 객체를 상속받을 수 있습니다.

6. **컴파일 및 실행 방식**:
   - **Java**: 코드가 먼저 컴파일되고, 실행 시 JVM에서 바이트 코드로 변환되어 실행됩니다.
   - **JavaScript**: 코드가 직접 브라우저나 Node.js에서 인터프리터 방식으로 실행됩니다.

**요약**:
- **Java**: 컴파일형, 정적 타입, 서버 사이드 및 앱 개발, 클래스 기반 OOP.
- **JavaScript**: 인터프리터형, 동적 타입, 주로 웹에서 클라이언트 사이드 개발, 프로토타입 기반 OOP.